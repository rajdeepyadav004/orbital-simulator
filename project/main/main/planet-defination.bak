#lang racket
(require "vector-defination.rkt")
(provide (all-defined-out))
(define G (* 6.674 (expt 10 -11)))
(define dt 0.01)
(define planetary-object%
  (class object%
    (init-field mass)
    (init-field radius)
    (init positions)
    (init velocities)
    (init forces)
   ;    (init-field color)
    (super-new)
    (define position positions)
    (define/public (show-position)
      position)
    (define/public (show-radius)
      radius)
    (define/public (coordinates)
      (send position show-vector))
    (define velocity velocities)
    (define force forces)
    (define acceleration (send force scalar-mult (/ 1 mass)))
    (define/public (show-mass)
      mass)
    (define/public (cal-force list-of-objects);list-of-objects maintain all objects
      (cond [(null? list-of-objects) (make-object vector% 0 0 0)]
            [(equal? this (car list-of-objects)) (send this cal-force (cdr list-of-objects))]
            [else (let* ([obj (car list-of-objects)]
                         [position-vector (sub-vector (send this show-position) (send obj show-position))]
                         [mass-obj (send obj show-mass)]
                         [R (send position-vector magnitude)]
                         [force-magnitude (* -1 G mass mass-obj (/ 1 (expt R 3)))])
                    (add-vector (send position-vector scalar-mult force-magnitude) (send this cal-force (cdr list-of-objects))))]))
    (define/public (change-planet-state list-of-objects)
      (begin
        (set! force (send this cal-force list-of-objects))
        (set! acceleration (send force scalar-mult (/ 1 mass)))
        (set! velocity (add-vector velocity (send acceleration scalar-mult dt)))
        (set! position (add-vector position (send velocity scalar-mult dt)))))))

